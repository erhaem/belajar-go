package main

import (
	"fmt"
	"runtime"
)

func main() {
	// This var "name" below is unused
	//name := "erhaem"

	fmt.Println("Go version:", runtime.Version())

	fmt.Println("Just another boring hello world program")

	// printing ascii arts can be pain in the ass!
	// the arts are mostly multiline strings
	// to print multiline strings you can go with backticks ``
	// like you do in JS
	// it's called raw string literals

	// 	fmt.Print(
	// `
	//   _          _       _
	//  | |        | |     (_)
	//  | |__   ___| | __ _ _  __ _ _ __ ______ __ _  ___
	//  | '_ \ / _ \ |/ _` | |/ _` | '__|______/ _` |/ _ \
	//  | |_) |  __/ | (_| | | (_| | |        | (_| | (_) |
	//  |_.__/ \___|_|\__,_| |\__,_|_|         \__, |\___/
	//                    _/ |                  __/ |
	//                   |__/                  |___/
	// `
	// 	)

	// that won't work because the art contains backticks
	// which delimit raw string literals in Go (violates the actual backtick "operator")
	// ugly solution: replace the backticks on the art with something else like (')

	// doesn't work? here is a workaround
	// using octal escape sequence
	// "encode/decode" here https://erhaem.github.io/Multi-Encoder -> choose Oct (JS)
	fmt.Print

	// ref: https://www.slingacademy.com/article/escape-sequences-in-go-strings-what-you-should-know/
	// i don't know if that could reduce performance
	// GPT said it's on par with raw string in terms of perf (checkout the benchmark)
	// as long as it's not way toooo long, i guess? :P
	// your code will look ugly otherwise
}
